<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task.xsd
            http://www.springframework.org/schema/mvc
            http://www.springframework.org/schema/mvc/spring-mvc.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!-- 3.开启SpringMVC注解模式 -->
    <context:component-scan base-package="com.me"/>
    <!-- 这一句依赖上一句的配置 -->
    <mvc:annotation-driven>
        <!-- 对于响应中中文设置 -->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <!--设置mime和字符集-->
                        <!-- 这里是没有通过模版引擎，直接返回时的格式 -->
                        <value>text/html;charset=utf-8</value>
                        <!-- 6.json(jackson)序列化输出配置 -->
                        <value>application/json;charset=utf-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <!-- 排除静态资源，提高SpringMVC对URL的处理效率 -->
    <mvc:default-servlet-handler/>

    <!-- 5.配置Freemarker模版引擎 -->
    <!--    哪个目录加载freemarker脚本-->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl"/>
        <!--        freemarker本身需要配置哪些参数-->
        <property name="freemarkerSettings">
            <props>
                <!--                freemarker读取指定指定文件时，使用UTF-8格式读取-->
                <prop key="defaultEncoding">UTF-8</prop>
            </props>
        </property>
    </bean>
    <!--    哪种模版引擎对数据进行解析,真正的执行对象-->
    <bean id="ViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <!--        SpringMVC加载freemarker产生html片段，返回数据的时候使用的text/html;charset=utf-8-->
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="suffix" value=".ftl"/>
    </bean>

    <!-- MyBatis与Spring的整合配置 -->
    <!--二、配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"/>
        <property name="url"
                  value="jdbc:mysql://localhost:3306/me_reader?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;allowPublicKeyRetrieval=true"/>
        <property name="username" value="root"/>
        <property name="password" value="1q1q1q1q"/>
        <!--        初始化多少连接,比如5个人使用就不该小于5-->
        <property name="initialSize" value="5"/>
        <!--        同时访问人数的峰值，超过的阻塞-->
        <property name="maxActive" value="20"/>
    </bean>
    <!-- SqlSessionFactoryBean用于根据配置信息创建SqlSessionFactory,不再需要我们自己编码创建 -->
    <!--
        原生MyBatis与Spring整合
        <bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        -->
    <bean id="sessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mappers/*.xml"/>
        <!-- 五、MyBatis配置文件地址 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>

    </bean>
    <!-- 四、配置Mapper扫描器 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--        告诉spring哪一个包是接口-->
        <property name="basePackage" value="com.me.reader.mapper"/>
    </bean>
    <!-- 声明式事务配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!-- 看到annotation-driven就是开启与之对应的注解模式 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置Kaptcha -->
    <bean id="kaptchaProducer" class="com.google.code.kaptcha.impl.DefaultKaptcha">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <!-- 验证码图片不生成边框 -->
                        <prop key="kaptcha.border">no</prop>
                        <!-- 验证码图片宽度为120像素 -->
                        <prop key="kaptcha.image.width">120</prop>
                        <!-- 验证码图片字体颜色为蓝色 -->
                        <prop key="kaptcha.textproducer.font.color">blue</prop>
                        <!-- 每个字符最大占用40像素，长度不够就会自动缩小 -->
                        <prop key="kaptcha.textproducer.font.size">40</prop>
                        <!-- 验证码包含4个字符 -->
                        <prop key="kaptcha.textproducer.char.length">4</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>
    <!-- 开启Spring Task定时任务的注解模式 -->
    <task:annotation-driven/>
</beans>